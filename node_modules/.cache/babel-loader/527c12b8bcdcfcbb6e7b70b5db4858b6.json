{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celoe\\\\Kanban-1\\\\src\\\\Components\\\\Dnd\\\\Dnd.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Column from './Column';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport AddTask from './AddTask';\nimport TaskCounter from './TaskCounter';\nimport useData from '../hooks/useData';\nimport { useAuth } from \"../../Contexts/AuthContext\";\nimport { database } from \"../../firebase\";\nimport { Spinner } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dnd = () => {\n  _s();\n\n  const {\n    currentUser\n  } = useAuth();\n  const {\n    state,\n    setState\n  } = useData(currentUser);\n\n  const onDragEnd = result => {\n    //used to persist new order after drag\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n    if (!destination) return;\n\n    if (result.destination.droppableId === result.source.droppableId && result.destination.index === result.source.index) {\n      return;\n    }\n\n    const start = state.columns[result.source.droppableId]; // InitialData.columns['column1'] = start = {id:column1, title:, taskIds: [task1, task2, task3, task4]}\n\n    const finish = state.columns[result.destination.droppableId];\n\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds); // newTaskIds = [task1, task2, task3, task4]\n\n      newTaskIds.splice(result.source.index, 1);\n      newTaskIds.splice(result.destination.index, 0, draggableId); // example: moving top of list to bottom \n      //newTaskIds = [task2, task3, task4, task1]\n\n      const newColumn = { ...finish,\n        taskIds: newTaskIds\n      }; // newColumn = {id:column1, title:, taskIds: [task2, task3, task4, task1]}\n\n      const newState = { ...state,\n        // spread syntax to maintian properties of of InitialData.tasks\n        columns: { ...state.columns,\n          //not needed for only one column\n          [finish.id]: newColumn //overrides existing column-- 'column1': {id, title, taskIds:[newTaskIds]}\n\n        } //since only 1 column, InitialData.columnOrder is not updated in newState\n\n      };\n      setState(newState);\n      database.columns.doc(start.id).update({\n        taskIds: newTaskIds\n      });\n      return;\n    } //Moving from one column to another\n\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(result.source.index, 1);\n    const newStart = { ...start,\n      taskIds: startTaskIds\n    };\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(result.destination.index, 0, draggableId);\n    const newFinish = { ...finish,\n      taskIds: finishTaskIds\n    };\n    const newState = { ...state,\n      columns: { ...state.columns,\n        [start.id]: newStart,\n        [finish.id]: newFinish\n      }\n    };\n    setState(newState);\n    database.columns.doc(newStart.id).update({\n      taskIds: startTaskIds\n    });\n    database.columns.doc(newFinish.id).update({\n      taskIds: finishTaskIds\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: state ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TaskCounter, {\n        state: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex\",\n          children: state.columnOrder.map(columnId => {\n            const column = state.columns[columnId];\n            const tasks = column.taskIds.map(taskId => state.tasks[taskId]);\n            return /*#__PURE__*/_jsxDEV(Column, {\n              column: column,\n              tasks: tasks,\n              state: state,\n              setState: setState\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 16\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(AddTask, {\n        state: state,\n        setState: setState,\n        currentUser: currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\",\n      variant: \"primary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n};\n\n_s(Dnd, \"piiFsX6eGxnzLJ0QiJUo/AvZjnc=\", false, function () {\n  return [useAuth, useData];\n});\n\n_c = Dnd;\nexport default Dnd;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dnd\");","map":{"version":3,"sources":["C:/Users/celoe/Kanban-1/src/Components/Dnd/Dnd.js"],"names":["React","useState","Column","DragDropContext","AddTask","TaskCounter","useData","useAuth","database","Spinner","Dnd","currentUser","state","setState","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","doc","update","startTaskIds","newStart","finishTaskIds","newFinish","columnOrder","map","columnId","column","tasks","taskId"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport Column from './Column' \r\nimport {DragDropContext} from 'react-beautiful-dnd'\r\nimport AddTask from './AddTask'\r\nimport TaskCounter from './TaskCounter'\r\nimport useData from '../hooks/useData'\r\nimport { useAuth } from \"../../Contexts/AuthContext\"\r\nimport { database } from \"../../firebase\"\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nconst Dnd = () => {\r\n  const {currentUser} = useAuth()\r\n  \r\n  const {state, setState} = useData(currentUser)\r\n  \r\n  const onDragEnd = result => {     //used to persist new order after drag\r\n    const {destination, source, draggableId} = result\r\n\r\n    if (!destination) return\r\n\r\n    if (\r\n      result.destination.droppableId === result.source.droppableId &&\r\n      result.destination.index === result.source.index\r\n    ) {\r\n      return\r\n    }\r\n\r\n    const start = state.columns[result.source.droppableId]\r\n// InitialData.columns['column1'] = start = {id:column1, title:, taskIds: [task1, task2, task3, task4]}\r\n    const finish = state.columns[result.destination.droppableId]\r\n\r\n    if (start === finish) {\r\n      const newTaskIds = Array.from(start.taskIds)\r\n// newTaskIds = [task1, task2, task3, task4]\r\n      newTaskIds.splice(result.source.index, 1)\r\n    \r\n      newTaskIds.splice(result.destination.index, 0, draggableId)\r\n// example: moving top of list to bottom \r\n//newTaskIds = [task2, task3, task4, task1]\r\n\r\n      const newColumn = {\r\n        ...finish, taskIds: newTaskIds,\r\n      }\r\n// newColumn = {id:column1, title:, taskIds: [task2, task3, task4, task1]}\r\n      const newState = {\r\n        ...state, // spread syntax to maintian properties of of InitialData.tasks\r\n        columns: {\r\n          ...state.columns, //not needed for only one column\r\n          [finish.id]: newColumn, //overrides existing column-- 'column1': {id, title, taskIds:[newTaskIds]}\r\n        }, //since only 1 column, InitialData.columnOrder is not updated in newState\r\n      } \r\n    \r\n      setState(newState)\r\n      \r\n      \r\n      \r\n      database.columns.doc(start.id)\r\n        .update({taskIds: newTaskIds})\r\n      return\r\n      \r\n    } \r\n\r\n\r\n    //Moving from one column to another\r\n    const startTaskIds = Array.from(start.taskIds)\r\n    startTaskIds.splice(result.source.index, 1)\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startTaskIds,\r\n    }\r\n\r\n    const finishTaskIds = Array.from(finish.taskIds)\r\n    finishTaskIds.splice(result.destination.index, 0, draggableId)\r\n    const newFinish = {\r\n      ...finish,\r\n      taskIds: finishTaskIds,\r\n    }\r\n\r\n    const newState = {\r\n      ...state,\r\n      columns: {\r\n        ...state.columns,\r\n        [start.id]: newStart,\r\n        [finish.id]: newFinish,\r\n      },\r\n    }\r\n\r\n    setState(newState)\r\n    \r\n    database.columns\r\n      .doc(newStart.id).update({taskIds: startTaskIds})\r\n\r\n    database.columns\r\n      .doc(newFinish.id).update({taskIds: finishTaskIds})\r\n  };\r\n\r\n  return (\r\n  <>\r\n  {state ?\r\n    (\r\n    <>\r\n  <TaskCounter state={state}/>\r\n  <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className='d-flex'>\r\n        {state.columnOrder.map(columnId => {\r\n          const column= state.columns[columnId];\r\n          const tasks= column.taskIds.map(taskId=> state.tasks[taskId]);\r\n\r\n        return <Column key={column.id} column={column} tasks={tasks} state={state} setState={setState}/>\r\n        })}\r\n      </div>\r\n    </DragDropContext>\r\n    <AddTask state={state} setState={setState} currentUser={currentUser}/>\r\n  </>\r\n  )\r\n  :\r\n  <Spinner animation=\"border\" variant=\"primary\"/>\r\n}\r\n</>\r\n  )\r\n}\r\n\r\nexport default Dnd"]},"metadata":{},"sourceType":"module"}