{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { database, firestore } from \"../../firebase\";\nimport { useAuth } from \"../../Contexts/AuthContext\";\nimport InitialData from '../Dnd/InitialData'; //read data from database and send to state in Dnd component \n\nconst useData = currentUser => {\n  _s();\n\n  const [tasks, setTasks] = useState(null);\n  const [columns, setColumns] = useState(null);\n  const [final, setFinal] = useState(null);\n  useEffect(() => {\n    return firestore.collection(\"users\").doc(currentUser.uid).collection(\"tasks\").onSnapshot(snap => {\n      const documents = {};\n      snap.forEach(d => {\n        documents[d.data().id] = d.data();\n      });\n      setTasks(documents);\n    });\n  }, [currentUser]);\n  useEffect(() => {\n    return firestore.collection(\"users\").doc(currentUser.uid).collection(\"columns\").onSnapshot(snap => {\n      const documents = {};\n      snap.forEach(d => {\n        documents[d.data().id] = d.data();\n      });\n      setColumns(documents);\n    });\n  }, [currentUser]);\n  useEffect(() => {\n    if (tasks && columns) {\n      const finalObject = {};\n      finalObject.tasks = tasks;\n      finalObject.columns = columns;\n      finalObject.columnOrder = ['column1', 'column2', 'column3', 'column4'];\n      setFinal(finalObject);\n    }\n  }, [tasks, columns]);\n  return {\n    state: final,\n    setState: setFinal\n  };\n};\n\n_s(useData, \"0zpf6bfs+hFGnwcsLe97zbZW1sE=\");\n\nexport default useData;","map":{"version":3,"sources":["C:/Users/celoe/Kanban-1/src/Components/hooks/useData.js"],"names":["useState","useEffect","database","firestore","useAuth","InitialData","useData","currentUser","tasks","setTasks","columns","setColumns","final","setFinal","collection","doc","uid","onSnapshot","snap","documents","forEach","d","data","id","finalObject","columnOrder","state","setState"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,gBAApC;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,WAAP,MAAwB,oBAAxB,C,CAEA;;AAEA,MAAMC,OAAO,GAAIC,WAAD,IAAiB;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,WAAOE,SAAS,CAACW,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkCR,WAAW,CAACS,GAA9C,EAAmDF,UAAnD,CAA8D,OAA9D,EACFG,UADE,CACSC,IAAI,IAAI;AAClB,YAAMC,SAAS,GAAG,EAAlB;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAaC,CAAC,IAAI;AAChBF,QAAAA,SAAS,CAACE,CAAC,CAACC,IAAF,GAASC,EAAV,CAAT,GAAyBF,CAAC,CAACC,IAAF,EAAzB;AACD,OAFD;AAGAb,MAAAA,QAAQ,CAACU,SAAD,CAAR;AAEH,KARI,CAAP;AASC,GAVM,EAUJ,CAACZ,WAAD,CAVI,CAAT;AAYAN,EAAAA,SAAS,CAAC,MAAM;AACd,WAAOE,SAAS,CAACW,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkCR,WAAW,CAACS,GAA9C,EAAmDF,UAAnD,CAA8D,SAA9D,EACFG,UADE,CACSC,IAAI,IAAI;AAClB,YAAMC,SAAS,GAAG,EAAlB;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAaC,CAAC,IAAI;AAChBF,QAAAA,SAAS,CAACE,CAAC,CAACC,IAAF,GAASC,EAAV,CAAT,GAAyBF,CAAC,CAACC,IAAF,EAAzB;AACD,OAFD;AAGAX,MAAAA,UAAU,CAACQ,SAAD,CAAV;AAEH,KARI,CAAP;AASC,GAVM,EAUJ,CAACZ,WAAD,CAVI,CAAT;AAYAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,KAAK,IAAIE,OAAb,EAAsB;AACpB,YAAMc,WAAW,GAAG,EAApB;AAGAA,MAAAA,WAAW,CAAChB,KAAZ,GAAoBA,KAApB;AACAgB,MAAAA,WAAW,CAACd,OAAZ,GAAsBA,OAAtB;AAEAc,MAAAA,WAAW,CAACC,WAAZ,GAA0B,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAA1B;AAEAZ,MAAAA,QAAQ,CAACW,WAAD,CAAR;AAED;AACF,GAbQ,EAaN,CAAChB,KAAD,EAAQE,OAAR,CAbM,CAAT;AAeA,SAAO;AAAEgB,IAAAA,KAAK,EAAEd,KAAT;AAAgBe,IAAAA,QAAQ,EAAEd;AAA1B,GAAP;AAED,CA9CD;;GAAMP,O;;AAgDN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { database, firestore } from \"../../firebase\"\r\nimport { useAuth } from \"../../Contexts/AuthContext\"\r\nimport InitialData from '../Dnd/InitialData'\r\n\r\n//read data from database and send to state in Dnd component \r\n\r\nconst useData = (currentUser) => {\r\n  const [tasks, setTasks] = useState(null)\r\n  const [columns, setColumns] = useState(null)\r\n  const [final, setFinal] = useState(null)\r\n  \r\n  useEffect(() => {\r\n    return firestore.collection(\"users\").doc(currentUser.uid).collection(\"tasks\")\r\n        .onSnapshot(snap => {\r\n          const documents = {}\r\n          snap.forEach(d => {\r\n            documents[d.data().id] = d.data()\r\n          })\r\n          setTasks(documents)\r\n          \r\n      })\r\n    }, [currentUser])\r\n  \r\n  useEffect(() => {\r\n    return firestore.collection(\"users\").doc(currentUser.uid).collection(\"columns\")\r\n        .onSnapshot(snap => {\r\n          const documents = {}\r\n          snap.forEach(d => {\r\n            documents[d.data().id] = d.data()\r\n          })\r\n          setColumns(documents)\r\n          \r\n      })\r\n    }, [currentUser])\r\n  \r\n  useEffect(() => {\r\n    if (tasks && columns) { \r\n      const finalObject = {}\r\n      \r\n      \r\n      finalObject.tasks = tasks\r\n      finalObject.columns = columns\r\n\r\n      finalObject.columnOrder = ['column1', 'column2', 'column3', 'column4']\r\n      \r\n      setFinal(finalObject)\r\n      \r\n    }\r\n  }, [tasks, columns])\r\n  \r\n  return { state: final, setState: setFinal }\r\n  \r\n}\r\n\r\nexport default useData"]},"metadata":{},"sourceType":"module"}